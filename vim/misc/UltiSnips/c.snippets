###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

# --------------------------------------------------------------------------------------------------

snippet cc "create comment (line)"
// ${1:insert comment}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet def "#define ..."
#define ${1}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

# --------------------------------------------------------------------------------------------------

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

# --------------------------------------------------------------------------------------------------

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

# --------------------------------------------------------------------------------------------------

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

# --------------------------------------------------------------------------------------------------

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

# --------------------------------------------------------------------------------------------------

snippet main "main() (main)"
int main(int argc, char *argv[])
{

	${VISUAL}${0}

	return 0;
}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet fors "for simple loop (fors)"
for(${1:i}=0; $1${2:<}${3:count}; ${4:++$1})
	${VISUAL}${0}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet for "for loop (for)"
for(${1:i}=0; $1${2:<}${3:count}; ${4:++$1}) {
	${VISUAL}${0}
} // $1$2$3
endsnippet

# --------------------------------------------------------------------------------------------------

snippet fori "for int loop (fori)"
for(${4:int} ${2:i}=0; $2<${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

# --------------------------------------------------------------------------------------------------

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

# --------------------------------------------------------------------------------------------------

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

# --------------------------------------------------------------------------------------------------

snippet wh "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet do "do...while loop (do)"
do {
	${VISUAL}${0}
} while(${1:/* condition */});
endsnippet

# --------------------------------------------------------------------------------------------------

snippet fprintf "fprintf ..."
fprintf(${1:stderr},"${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:,:\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet if "if .. (if)"
if(${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet el "else .. (else)"
else {
	${VISUAL}${0}
}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet eli "else if .. (eli)"
else if(${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet ife "if .. else (ife)"
if(${1:/* condition */}) {
	${2}
}
else {
	${3:/* else */}
}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:,:\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}${VISUAL}${0}
endsnippet

# --------------------------------------------------------------------------------------------------

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

# --------------------------------------------------------------------------------------------------

snippet fun "function" b
${3:void} ${1:name}( ${4:void} )
{
	${VISUAL}${0}
}

endsnippet

# --------------------------------------------------------------------------------------------------

snippet funp "function prototype" b
${1:void} ${2:function_name}(${3});
endsnippet

# --------------------------------------------------------------------------------------------------

snippet head "new header file" b
#ifndef `!v toupper(expand('%:t:r'))`_H
#define `!v toupper(expand('%:t:r'))`_H

$1

#endif
endsnippet

# --------------------------------------------------------------------------------------------------

snippet source "new source file" b

/* +-----------------------------------------------------------------------------------------------+
 * | Source Code File: `!v expand('%:t')` 
 * +-----------------------------------------------------------------------------------------------+
 * | Description:                                                                                  |
 * | ${1:description text}.
 * +-----------------------------------------------------------------------------------------------+ */

${2:includes}


${3:functions}

endsnippet

# --------------------------------------------------------------------------------------------------

snippet incs "include standard modules" b
// include standard modules
#include <${1:include standard modules}>

endsnippet

# --------------------------------------------------------------------------------------------------

snippet incp "include program modules" b
// include program modules
#include "${1:include program modules}"

endsnippet

# --------------------------------------------------------------------------------------------------

snippet inch "include source file header" b
// include source file header
#include "${1:include source file header}"

endsnippet

# --------------------------------------------------------------------------------------------------

snippet inp "include local prototypes" b
// local prototypes
${1:local prototypes}

endsnippet

# --------------------------------------------------------------------------------------------------

snippet todo "TODO remainder"
// TODO: `echo $USER`, `!v strftime("%c")`
// ${1:desc} 
endsnippet

# --------------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------#
#                               MPI snippets                                #
#---------------------------------------------------------------------------#


#---------------------------------------------------------------------------#
#                              OpenMP snippets                              #
#---------------------------------------------------------------------------#


#---------------------------------------------------------------------------#
#                               HDF5 snippets                               #
#---------------------------------------------------------------------------#

snippet h5fopen "Open HDF5 file."
H5Fopen(${1:file name}, ${2:RDWR flag}, ${3:file access property});
endsnippet

snippet h5dopen "Open HDF5 dataset."
H5Dopen(${1:file_id}, ${2:dataset}, ${3:dataset access property});
endsnippet

snippet h5read "Read from HDF5 dataset."
H5Dread(${1:set_id}, ${2:mem_type_id}, ${3:mem_space_id}, ${4:file_space_id}, ${5:xfer_prp}, ${6:buf});
endsnippet

snippet h5write "Write into HDF5 dataset."
H5Dwrite(${1:set_id}, ${2:mem_type_id}, ${3:mem_space_id}, ${4:file_space_id}, ${5:xfer_prp}, ${6:buf});
endsnippet


###########################################################################
#                              Own  Snippets                              #
###########################################################################

snippet err "error()"
ERROR("${1:error_txt}");
${2}
endsnippet

snippet errm "ask memory error"
if(${1:var} == NULL) ERROR("${2:Allocating memory for} $1.");
${3}
endsnippet

snippet ar1 "newArray1d()"
(${1:type} *) newArray1d( ${2:count}, sizeof($1) );
${3}
endsnippet

snippet ar2 "newArray2d()"
(${1:type} **) newArray2d( ${2:count1},
                           ${3:count2},
                           sizeof($1) );
${4}
endsnippet

snippet ar3 "newArray3d()"
(${1:type} ***) newArray2d( ${2:count1},
                            ${3:count2},
                            ${4:count3},
                            sizeof($1) );
${5}
endsnippet


###########################################################################
#                            Project Snippets                             #
###########################################################################

# loop over domains
snippet pford "for domain loop"
for(uint16_t d=0; d<${1:NDomains}; d++) {
	${VISUAL}${0}
} // d<$1
endsnippet

# loop over vertices
snippet pfori "for vertex loop"
for(uint32_t i=0; i<${1:NVerts}; i++) {
	${VISUAL}${0}
} // i<$1
endsnippet

# loop over cells
snippet pforj "for cell loop"
for(uint32_t j=0; j<${1:NCells}; j++) {
	${VISUAL}${0}
} // j<$1
endsnippet


# vim:ft=snippets:
